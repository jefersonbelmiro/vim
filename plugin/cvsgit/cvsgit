#!/usr/bin/php -q 
<?php

// @todo criar no arquivo, o projeto dele, o path do projeto, parecido com git
CvsGit::$aProjetos = array(
  '/var/www/dbportal_prj/',
  '/var/www/dbpref',
  '/var/www/funcoes8/'
);

/**
 * remove primeiro indice com nome do arquivo atual 
 */
array_shift($argv);

/**
 * argumentos passados para o script
 */
$aArgumentos = $argv;

/**
 * Opcao a ser executada
 */
$sOpcao = array_shift($aArgumentos);

/**
 * verifica qual metodo chamar 
 */
switch ($sOpcao) {

  default : 

    CvsGit::output('Nenhuma opão escolhida');
    CvsGit::output('Usar: cvsgit [comando] [opcoes do comando]');
    CvsGit::output('Comandos: status, add, push, rm e pull');

  break;

  case 'status' :
    CvsGit::status();
  break;

  case 'add':
  case 'commit':
    CvsGit::adicionar($aArgumentos);
  break;

  case 'rm':
    CvsGit::remover($aArgumentos);
  break;

  case 'push' :
    CvsGit::push();
  break;

  case 'pull' :
    CvsGit::pull();
  break;
}

class CvsGit {
  
  public static $aProjetos = array();
  public static $sCaminhoArquivoObjetoCommit = '/tmp/arquivoObjetoCommit';

  public static function output($sMensagem) {
    echo $sMensagem . "\n";
  }

  private static function getArquivos() {
    
    if ( !file_exists(self::$sCaminhoArquivoObjetoCommit) ) {
      return array();
    }

    return unserialize(file_get_contents(self::$sCaminhoArquivoObjetoCommit));
  }

  private static function setArquivos(Array $aArquivos) {
    return file_put_contents(self::$sCaminhoArquivoObjetoCommit, serialize($aArquivos));
  }

  public static function push() {

    $aArquivos = self::getArquivos();

    if ( empty($aArquivos) ) {

      self::output('Nenhum arquivo para comitar.');
      return;
    }

    $oTabela = new Table();
    $oTabela->setHeaders(array('Arquivo', 'Tag', 'Mensagem', 'Tipo'));
    $aLinhas = array();
    $aErros  = array();
    $aComandos = array();

    foreach ( $aArquivos as $oCommit ) {

      $sArquivo      = $oCommit->sArquivo;
      $iTag          = $oCommit->iTag;
      $sMensagem     = $oCommit->sMensagem;
      $sTipoCompleto = $oCommit->sTipoCompleto;

      if ( !file_exists($oCommit->sArquivo) ) {

        $sArquivo = '[X] ' . $oCommit->sArquivo;
        $aErros[] = 1;
      }

      if ( empty($oCommit->sMensagem) ) {

        $sMensagem = '[x]';
        $aErros[] = 1;
      }

      if ( empty($oCommit->iTag) || strlen($oCommit->iTag) < 4 ) {

        $iTag = '[x]';
        $aErros[] = 1;
      }

      if ( empty($oCommit->sTipoAbreviado) || empty($oCommit->sTipoCompleto) ) {

        $sTipoCompleto = '[x]';
        $aErros[] = 1;
      }

      $oTabela->addRow(array($sArquivo, $iTag, $sMensagem, $sTipoCompleto));

      $aComandos[ $oCommit->sArquivo ][] = $oCommit->sComandoCommit;
      $aComandos[ $oCommit->sArquivo ][] = $oCommit->sComandoTag;
    }

    if ( !empty($aErros) ) {

      self::output("\n" . count($aErros) . " erros encontrados:");
      self::output($oTabela->render());
      return;
    }

    echo "\n";

    foreach($aComandos as $sArquivo => $aComandos) {

      self::output("$sArquivo: ");

      foreach ( $aComandos as $sComando ) {
        self::output("   " . $sComando);
      }

      //self::output($sArquivo . " comitado!");
      //system($sComando);
    }

    echo "\n";
    
    //self::output("\n   " . implode("\n   ", $aComandos). "\n");
  }

  public static function remover($aParametros) {

    $aArquivos = self::getArquivos();

    foreach ( $aParametros as $sParametro ) {

      if ( in_array($sParametro, array('.', '*', 'all')) ) {
        $aArquivos = array();
      }

      if ( !empty($aArquivos[$sParametro]) ) {
        unset($aArquivos[$sParametro]);
      }
    }

    self::setArquivos($aArquivos);
  }
  
  public static function status() {

    $aArquivos = self::getArquivos();

    if ( empty($aArquivos) ) {

      self::output('Nenhum arquivo para comitar.');
      return;
    }

    $oTabela = new Table();
    $oTabela->setHeaders(array('Arquivo', 'Tag', 'Mensagem', 'Tipo'));
    $aLinhas = array();

    foreach ($aArquivos as $oCommit) {
      $oTabela->addRow(array($oCommit->sArquivo, $oCommit->iTag, $oCommit->sMensagem, $oCommit->sTipoCompleto));
    }

    self::output($oTabela->render());
  }

  public static function pull() {
    self::output('cvsgit::pull');
  }

  public static function adicionar($aArgumentos) {

    $sDiretorioAtual = rtrim(getcwd(), '/') . '/';

    if ( !in_array($sDiretorioAtual, self::$aProjetos) ) {
      return self::output('Pasta atual não é um projeto: ' . $sDiretorioAtual);
    }

    /**
     * Parametros do commit  
     */
    $oParametros = new StdClass();
    $oParametros->sArquivo       = null;
    $oParametros->sMensagem      = null;
    $oParametros->iTag           = null;
    $oParametros->sTipoAbreviado = null;
    $oParametros->sTipoCompleto  = null;

    /**
     * Variavel para controlar itens do array $aArgumentos que serao pulados 
     */
    $iContinue = 0;

    /**
     * Percorre os argumentos e monta parametros para commit 
     */
    foreach ($aArgumentos as $iIndice => $sArgumento) {

      if ( $iContinue > 0 && $iIndice == $iContinue )  {

        $iContinue = 0;
        continue;
      }

      switch ( $sArgumento ) {
        
        /**
         * Mensagem do commit 
         */
        case '-m' :
        case '-msg' :
        case '-mensagem' :

          $iContinue = $iIndice + 1;
          $oParametros->sMensagem = $aArgumentos[$iContinue];
          continue;

        break;

        /**
         * Tag do commit 
         */
        case '-t' :
        case '-tag' :

          $iContinue = $iIndice + 1;
          if ( empty($aArgumentos[$iContinue]) || strpos($aArgumentos[$iContinue], '-') !== false ) {
            continue;
          }
          $oParametros->iTag = $aArgumentos[$iContinue];
          continue;

        break;

        /**
         * Commit para melhorias 
         */
        case '-e' :
        case '-enh' :
        case '-enhanced' :

          $oParametros->sTipoAbreviado = 'ENH';
          $oParametros->sTipoCompleto = 'enhanced';
          continue;

        break;

        /**
         * Commit para correcao de erros 
         */ 
        case '-f' :
        case '-fix' :
        case '-fixed' :

          $oParametros->sTipoAbreviado = 'FIX';
          $oParametros->sTipoCompleto = 'fixed';
          continue;

        break;

        /**
         * Commit para adicionar fonte ou funcionalidade
         */
        case '-a' :
        case '-add' :
        case '-added' :

          $oParametros->sTipoAbreviado = 'ADD';
          $oParametros->sTipoCompleto = 'added';
          continue;

        break;

        /**
         * Commit para modificacoes do layout ou documentacao 
         */
        case '-s' :
        case '-style' :

          $oParametros->sTipoAbreviado = 'STYLE';
          $oParametros->sTipoCompleto = 'style';
          continue;

        break;

      }

      if ( file_exists($sArgumento) && $sArgumento != '.' ) {
        $oParametros->sArquivo = $sArgumento;
      }

    }

    $oParametros->sComandoCommit = "cvs commit -m '$oParametros->sTipoAbreviado: $oParametros->sMensagem ($oParametros->sTipoCompleto #$oParametros->iTag)' $oParametros->sArquivo";
    $oParametros->sComandoTag    = "cvs tag -F T$oParametros->iTag $oParametros->sArquivo";

    $aMensagemErro = array();
    $sEspacamento = ' ';

    if ( empty($oParametros->sArquivo) ) {
      $aMensagemErro[] = 'Arquivo para commit nao informado ou invalido';
    }
      
   //if ( empty($oParametros->sMensagem) ) {
   //  $aMensagemErro[] = 'Mensagem do commit nao informado';
   //}
   //
   //if ( empty($oParametros->iTag) || strlen($oParametros->iTag) < 4 ) {
   //  $aMensagemErro[] = 'Tag nao informada, ou invalida';
   //}
   //
   //if ( empty($oParametros->sTipoAbreviado) || empty($oParametros->sTipoCompleto) ) {
   //  $aMensagemErro[] = "Tipo de commit nao informado ou invalido | Tipos de commit: addeded(a, add), fixed(fix, f), enhanced(enh, e), style(s)";
   //}

    if ( !empty($aMensagemErro) ) {

      $sMensagemErro  = "Erro ao adicionar aquivo para commit:\n\n - ";
      $sMensagemErro .= implode("\n - ", $aMensagemErro);
      $sMensagemErro .= "\n";

      self::output($sMensagemErro);
      exit(1);
    }

    $aArquivos = self::getArquivos();
    $aArquivos[ $oParametros->sArquivo ] = $oParametros;
    self::setArquivos($aArquivos);
  }

}

class Shell {

	/**
   * Retorna o numero de colunas do atual shell 
	 * @return int numero de colunas
	 */
	static public function columns() {
		return exec('/usr/bin/env tput cols');
	}
}

class Table {

	protected $aHeaders = array();
	protected $aWidht   = array();
	protected $aRows    = array();

	public function __construct(array $headers = null, array $rows = null) {

		if ( !empty($headers) ) {
			$this->setHeaders($headers);
		}

    if ( !empty($rows) ) {
			  $this->setRows($rows);
    }
	}

	protected function checkRow(array $row) {

		foreach ($row as $column => $str) {

			$width = strlen($str);

			if (!isset($this->aWidth[$column]) || $width > $this->aWidth[$column]) {
				$this->aWidth[$column] = $width;
			}
		}

		return $row;
	}

	public function render() {
		
		$borderStr = '';

		foreach ($this->aHeaders as $column => $header) {

      if ( $column > 0 ) {
		    $borderStr .= '+';
      }

			$borderStr .= '-' . str_repeat('-', $this->aWidth[$column]) . '-';
		}

		$sTabela  = "\n" . $this->renderRow($this->aHeaders);
		$sTabela .= "\n" . $borderStr;

		foreach ($this->aRows as $row) {
			$sTabela .= "\n" . $this->renderRow($row);
		}

    // @todo tabela com tamanho maior que a janela do shell
    //if ( strlen($borderStr) > Shell::columns() ) {

    return $sTabela . "\n";
	}

	protected function renderRow(array $row) {

		$render = '';

		foreach ($row as $column => $val) {

      if ( $column > 0 ) {
		    $render .= '|';
      }

			$render .= ' ' . str_pad($val, $this->aWidth[$column]). ' ';
		}

		return $render;
	}

	public function sort($column) {

		if (!isset($this->aHeaders[$column])) {

			trigger_error('Coluna invalida no index ' . $column, E_USER_NOTICE);
			return;
		}

		usort($this->aRows, function($a, $b) use ($column) {
			return strcmp($a[$column], $b[$column]);
		});
	}

	public function setHeaders(array $headers) {
		$this->aHeaders = $this->checkRow($headers);
	}

	public function addRow(array $row) {
		$this->aRows[] = $this->checkRow($row);
	}

	public function setRows(array $rows) {

		$this->aRows = array();

		foreach ($rows as $row) {
			$this->addRow($row);
		}
	}

}
